Task 3: Lead Programmer - NFT Event Backend Logic Implementation
Agent: Lead Software Engineer (Mobile Web Games - HTML5/JS)

Output:

The backend logic implementation for the first NFT event in Mythborne Companions will be structured to clearly accommodate quest tracking, event progression, reward calculation, and integration with the defined NFT handler scaffold. The implementation will be organized into the following key modules/functions:

1. EventQuestTracker Module:

This module will manage and track player progress against predefined event quests and milestones.

Functions:

initPlayerEventProgress(playerId): Initializes player's tracking data at the event start.

updateQuestProgress(playerId, questId, progressData): Called upon player actions to update quest completion status.

getPlayerEventProgress(playerId): Retrieves current quest and milestone completion status for a player.

2. EventMilestoneEvaluator Module:

Responsible for evaluating completion status of event milestones based on quest progress and determining eligibility for NFT rewards.

Functions:

checkMilestoneCompletion(playerId): Evaluates if player has met criteria for next milestone(s); this is triggered when quest progress updates occur.

calculateEligibleRewards(playerId): Determines NFT reward eligibility, applying probabilities detailed in the design specification (Common/Uncommon guaranteed on milestone completion, probabilistic Rare/Epic/Legendary based on advanced milestones).

3. NFTRewardCalculator Module:

Implements logic to calculate NFT reward rarity based on defined probabilities for the milestone reached.

Functions:

determineRewardTier(milestoneLevel): Returns the NFT reward tier based on milestone achieved and probabilities provided (e.g., 100% for Common/Uncommon, 10% Rare, 3% Epic, 0.5% Legendary for advanced milestones).

checkMintLimits(tier): Ensures mint limits per rarity tier (e.g., Uncommon max 10,000, Rare max 5,000, Epic max 1,000, Legendary max 200) have not been reached; adjusts NFT eligibility accordingly.

4. NFTHandlerInterface Module:

Interfaces directly with the existing NFT minting placeholder handler already defined in the scaffold. This module does not perform actual blockchain minting but prepares data for minting when the blockchain integration is ready.

Functions:

requestNFTMint(playerId, nftTier, metadata): Passes NFT reward details (tier and relevant metadata) to the NFT handler scaffold for queued minting.

queueMintingRequest(playerId, tier): Aggregates minting requests and ensures data consistency; handles queuing logic until blockchain interactions are implemented.

Workflow Overview:

When a player completes actions relevant to event quests, the EventQuestTracker updates their progress accordingly.

The EventMilestoneEvaluator checks if the player meets milestone completion conditions, triggering reward eligibility evaluation.

The NFTRewardCalculator determines the appropriate NFT tier reward based on milestone and defined probabilities.

The NFTRewardCalculator validates mint limits for each tier before finalizing the eligible NFT reward.

Once a valid NFT reward is determined, NFTHandlerInterface module queues the NFT minting request for future blockchain interactions, interfacing seamlessly with the NFT minting scaffold.

This structured approach clearly separates responsibilities, ensures scalability for future events, and maintains compatibility with existing code scaffolds. Moreover, this implementation directly aligns with the Game Designer's detailed NFT event specification, ensuring accurate reward distribution and clear path towards full blockchain minting integration once the infrastructure is ready.